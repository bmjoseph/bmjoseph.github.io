<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog_Name</title>
    <link>https://bmjoseph.github.io/</link>
    <description>Recent content on Blog_Name</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://bmjoseph.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://bmjoseph.github.io/about/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bmjoseph.github.io/about/</guid>
      <description>Bailey Joseph&amp;rsquo;s Stats Blog The source code for all articles and the data they need to run can be found right here (on my Github).
To skip straight to the source code (the .Rmd files) for each of my articles, follow this link to the source/post directory.
Please feel free to email me at bmjoseph@berkeley.edu if you have any questions of if you notice that I&amp;rsquo;ve made a mistake.</description>
    </item>
    
    <item>
      <title>Log Loss as a Measure of Accuracy</title>
      <link>https://bmjoseph.github.io/2019/01/09/log-loss-as-a-measure-of-accuracy/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bmjoseph.github.io/2019/01/09/log-loss-as-a-measure-of-accuracy/</guid>
      <description>Motivation Evaluating a binary classifier can be difficult. Suppose you have a model which takes in some data and predicts whether a certain team will beat their opponent. Let’s say that specifically, it returns the probability that the home team wins. How do you know if your model is doing a good job?
What about just a standard accuracy? At first glance, it’s nice to say something like: “My model predicts the correct outcome 80% of the time.</description>
    </item>
    
    <item>
      <title>A Look into Roulette Strategy</title>
      <link>https://bmjoseph.github.io/2019/01/07/a-look-into-roulette-strategy/</link>
      <pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bmjoseph.github.io/2019/01/07/a-look-into-roulette-strategy/</guid>
      <description>Disclaimer Fixed Spin Gambler Fixed Spins and Fixed Goal House Advantage   I recently made a trip to Las Vegas, so for this post, I want to run some calculations and simulations to check a gambler’s odds of winning according to different goals and situations. I’ll assume every bet is made on a color (or on odd/even) and thus has a fixed \(p = \frac{18}{38}\) of winning.</description>
    </item>
    
    <item>
      <title>An Interesting Expectation Question</title>
      <link>https://bmjoseph.github.io/2018/12/05/an-interesting-expectation-question/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bmjoseph.github.io/2018/12/05/an-interesting-expectation-question/</guid>
      <description>Setup My friend recently encountered an interesting interview question. Unfortunately, he couldn’t answer it off the top of his head during the interview. We talked about it later – I couldn’t answer it either. The problem intrigued me, so I’ve passed it around but thus far haven’t found anyone who can give an answer without sitting down and thinking privately.
Anyway, here’s the problem:</description>
    </item>
    
    <item>
      <title>Intro to Web Scraping</title>
      <link>https://bmjoseph.github.io/2017/11/18/intro-to-web-scraping/</link>
      <pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bmjoseph.github.io/2017/11/18/intro-to-web-scraping/</guid>
      <description>Introduction and Motivation Reading Web Data into R Background About HTML Using the Package Rvest  Song Lyric Analysis Data Cleaning with Stringr Scraping and Cleaning More Lyrics for Analysis Analysis of Repetition  Making Word Clouds from Song Lyrics Conclusion Reproducibility References   library(rvest) # For web mining library(stringr) # For cleaning Strings library(dplyr) # For manipulating data frames library(tm) # For text operations necessary to create a word cloud library(wordcloud) # For creating a word cloud library(ggplot2) # For producing visualizations Introduction and Motivation We’ve developed a large toolbox for working with and analyzing strings, but so far we’ve been restricted to looking at strings that we either type out by hand or are easily imported as rows and columns in a csv or other spreadsheet format.</description>
    </item>
    
    <item>
      <title>Dates in R</title>
      <link>https://bmjoseph.github.io/2017/10/31/dates-in-r/</link>
      <pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bmjoseph.github.io/2017/10/31/dates-in-r/</guid>
      <description>Introduction and Motivation Converting to Objects of Class “Date” Lubridate Inconvenient or Uncommon Cases   Operations with Dates Using Dates to Manipulate Datasets Tracking Values with Respect to Time Linear Regression Using Time Data  Conclusion References:   ## You&amp;#39;ll need to have the following packages installed and loaded: library(lubridate) # For dealing with dates library(ggplot2) # For creating visuals and plots library(dplyr) # For working with the data library(readr) # For importing csv data files Introduction and Motivation We have many ways of writing down and understanding dates in English.</description>
    </item>
    
  </channel>
</rss>